#!/bin/bash

HOST="$1"
INVENTORY="<PATH-TO-ANSIBLE-INVENTORY-FILE>"

preflight_check() {

	if [ -z "$HOST" ]; then
		echo "Usage: $0 hostname"
		exit
	fi

	if [ ! -f "$INVENTORY" ]; then
		echo "Inventory file not found in $INVENTORY"
		exit
	fi
}

show_tui() {

	# for feature version
        if [ -z "$HOST" ]; then
		# show TUI
		# as result - need set HOST and run to next
        fi
}

prerun_check() {

	STRING=`grep ^$HOST $INVENTORY`

	if [ -z "$STRING" ]; then
		echo "$HOST not found in $INVENTORY"
		exit
	fi

	STRING_COUNT=$(echo "$STRING" | wc -l)

	if [ "$STRING_COUNT" -ne 1 ]; then
	    echo "Many host's found by this name: $HOST"
	    exit
	fi
}

populate_vars() {

	SSHIP=$(echo "$STRING" | awk '{for(i=1;i<=NF;i++) if($i~/ansible_ssh_host=/) print $i}' | cut -d'=' -f2)
	SSHPORT=$(echo "$STRING" | awk '{for(i=1;i<=NF;i++) if($i~/ansible_ssh_port=/) print $i}' | cut -d'=' -f2)
	SSHUSER=$(echo "$STRING" | awk '{for(i=1;i<=NF;i++) if($i~/ansible_ssh_user=/) print $i}' | cut -d'=' -f2)
	SSHPASS=$(echo "$STRING" | awk '{for(i=1;i<=NF;i++) if($i~/ansible_ssh_pass=/) print $i}' | cut -d'=' -f2)
	SSHBECOMETYPE=$(echo "$STRING" | awk '{for(i=1;i<=NF;i++) if($i~/ansible_become_method=/) print $i}' | cut -d'=' -f2)
        SSHBECOMEUSER=$(echo "$STRING" | awk '{for(i=1;i<=NF;i++) if($i~/ansible_become_user=/) print $i}' | cut -d'=' -f2)
        SSHBECOMEPASS=$(echo "$STRING" | awk '{for(i=1;i<=NF;i++) if($i~/ansible_become_password=/) print $i}' | cut -d'=' -f2)

	if [ -z "$SSHIP" ]; then
		echo "No IP in $INVENTORY"
		exit
	fi

	if [ -z "$SSHPORT" ]; then
		SSHPORT="22"
	fi

	if [ -z "$SSHUSER" ]; then
		echo "No user in $INVENTORY"
		exit
	fi

	if [ -z "$SSHPASS" ]; then
		echo "No password in $INVENTORY"
		exit
	fi

	if [ -z "$SSHBECOMETYPE" ]; then
		SSHBECOMETYPE="no"
	fi

        if [ -z "$SSHBECOMEUSER" ]; then
                SSHBECOMEUSER="root"
        fi
}

become_no() {

	expect -c "
	set timeout 10
	spawn ssh -l $SSHUSER -p $SSHPORT $SSHIP
	expect {
    		\"yes/no\" { send \"yes\r\"; exp_continue }
    		\"password:\" { send \"$SSHPASS\r\" }
	}

	interact
	"
}

become_sudo() {

	expect -c "
	set timeout 10
	spawn ssh -l $SSHUSER -p $SSHPORT $SSHIP
	expect {
		 \"yes/no\" { send \"yes\r\"; exp_continue }
		\"password:\" { send \"$SSHPASS\r\" }
	}

	expect \"\$ \"
	send \"sudo -s\r\"
	expect \"password for $SSHUSER:\"
	send \"$SSHPASS\r\"
	interact
	"
}

become_su() {

        if [ -z "$SSHBECOMEPASS" ]; then
                echo "No exist password for become"
		exit
        fi

        expect -c "
        set timeout 10
        spawn ssh -l $SSHUSER -p $SSHPORT $SSHIP
        expect {
                 \"yes/no\" { send \"yes\r\"; exp_continue }
                \"password:\" { send \"$SSHPASS\r\" }
        }

        expect \"\$ \"
        send \"su -l $SSHBECOMEUSER\r\"
        expect \"Password:\"
        send \"$SSHBECOMEPASS\r\"
        interact
        "
}

become_pbrun() {

        if [ -z "$SSHBECOMEPASS" ]; then
                echo "No exist password for become"
                exit
        fi

	expect -c "
	set timeout 10
        spawn ssh -l $SSHUSER -p $SSHPORT $SSHIP
        expect {
                 \"yes/no\" { send \"yes\r\"; exp_continue }
                \"password:\" { send \"$SSHPASS\r\" }
        }

        expect \"\$ \"
	spawn pbrun -u root /bin/bash
	expect \"Password:\"
	send \"$SSHBECOMEPASS\r\"
	interact
        "
}

become_pfexec() {

        expect -c "
        set timeout 10
        spawn ssh -l $SSHUSER -p $SSHPORT $SSHIP
        expect {
                 \"yes/no\" { send \"yes\r\"; exp_continue }
                \"password:\" { send \"$SSHPASS\r\" }
        }

        expect \"\$ \"
        spawn pfexec /bin/bash
        interact
        "
}

become_doas() {

        if [ -z "$SSHBECOMEPASS" ]; then
                echo "No exist password for become"
                exit
        fi

        expect -c "
        set timeout 10
        spawn ssh -l $SSHUSER -p $SSHPORT $SSHIP
        expect {
                 \"yes/no\" { send \"yes\r\"; exp_continue }
                \"password:\" { send \"$SSHPASS\r\" }
        }

        expect \"\$ \"
        send \"doas -u $SSHBECOMEUSER\r\"
        expect \"Password:\"
        send \"$SSHBECOMEPASS\r\"
        interact
        "
}

become_dzdo() {

        if [ -z "$SSHBECOMEPASS" ]; then
                echo "No exist password for become"
                exit
        fi

        expect -c "
        set timeout 10
        spawn ssh -l $SSHUSER -p $SSHPORT $SSHIP
        expect {
                 \"yes/no\" { send \"yes\r\"; exp_continue }
                \"password:\" { send \"$SSHPASS\r\" }
        }

        expect \"\$ \"
        send \"dzdo -u $SSHBECOMEUSER\r\"
        expect \"Password:\"
        send \"$SSHBECOMEPASS\r\"
        interact
        "
}

become_ksu() {

        if [ -z "$SSHBECOMEPASS" ]; then
                echo "No exist password for become"
                exit
        fi

        expect -c "
        set timeout 10
        spawn ssh -l $SSHUSER -p $SSHPORT $SSHIP
        expect {
                 \"yes/no\" { send \"yes\r\"; exp_continue }
                \"password:\" { send \"$SSHPASS\r\" }
        }

        expect \"\$ \"
        send \"ksu $SSHBECOMEUSER /bin/bash\r\"
        expect \"Password for principal\"
        send \"$SSHBECOMEPASS\r\"
        interact
        "
}

login() {

	case $SSHBECOMETYPE in
		"no")
			become_no;;
		"sudo")
			become_sudo;;
		"su")
			become_su;;
		"pbrun")
			become_pbrun;;
		"pfexec")
			become_pfexec;;
		"doas")
			become_doas;;
		"dzdo")
			become_dzdo;;
		"ksu")
			become_ksu;;
	esac
}

preflight_check
#show_tui
prerun_check
populate_vars
login



# EOF
